plugins {
    id 'java'
    id "com.github.spacialcircumstances.gradle-cucumber-reporting" version "0.1.25"
    id 'jacoco'
    id("org.sonarqube") version "6.0.1.5171"
    id 'maven-publish'
    //id("net.wooga.slack") version "3.0.0"
    //id("de.zebrajaeger.sendMail") version "0.1.1"
}

group = 'com.example'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'io.cucumber:cucumber-java:6.0.0'
    testImplementation 'io.cucumber:cucumber-junit:6.0.0'
    testImplementation 'junit:junit:4.13.2'
}

generateCucumberReports {
    outputDir = file('build/reports/cucumber')
    buildId = '0'
    reports = files('reports/example-report.json')
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

sonar {
    properties {
        property "sonar.host.url", "http://197.140.142.82:9000/"
    }
}

project.tasks["sonar"].dependsOn test

publishing {
    repositories {
        maven {
            url 'https://mymavenrepo.com/repo/tjkeHHYTSCTr8dQ4fDGj/'
            credentials {
                username 'myMavenRepo'
                password 'test'
            }
        }
    }

    publications {
        maven(MavenPublication) {
            from components.java
        }
    }
}

/*tasks.register('sendMessage2') {
    doLast {
        def webhookUrl = 'https://hooks.slack.com/services/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'
        def message = "Hello! This is a notification from Gradle"

        def payload = '{"text": "' + message + '"}'

        def connection = new URL(webhookUrl).openConnection() as HttpURLConnection
        connection.requestMethod = 'POST'
        connection.doOutput = true
        connection.setRequestProperty('Content-Type', 'application/json')

        connection.outputStream.withWriter('UTF-8') { writer ->
            writer.write(payload)
        }

        if (connection.responseCode == 200) {
            println "Slack notification sent successfully."
        } else {
            println "Failed to send Slack notification. Response: ${connection.responseCode} - ${connection.errorStream.text}"
        }
    }
}

sendMail {
    smtpServer {
        host "smtp.gmail.com"
        port 587
        user "gueddoucherania@gmail.com"
        password "jcrtuyhzbiwvcbrd"
    }
    mail {
        from "mytestemail@gmail.com"
        to "lr_gueddouche@esi.dz"
        body "Hello! This is the delpoyment notification."
    }
}*/
